#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <time.h>

#define MAX_ALFABETO 256
#define MAX_CADENA 100
#define MAX_PALABRAS 100

char l1[MAX_PALABRAS][MAX_CADENA];
char l2[MAX_PALABRAS][MAX_CADENA];
char ld[MAX_PALABRAS][MAX_CADENA];

int es_prefijo(char *w1, char *w2) {
    return strncmp(w1, w2, strlen(w1)) == 0;
}

int es_sufijo(char *w1, char *w2) {
    int longitud1 = strlen(w1);
    int longitud2 = strlen(w2);
    if (longitud1 > longitud2) return 0;
    return strncmp(w1, w2 + longitud2 - longitud1, longitud1) == 0;
}

int es_subsecuencia(char *w1, char *w2) {
    while (*w1 && *w2) {
        if (*w1 == *w2) w1++;
        w2++;
    }
    return !*w1;
}

int es_subcadena(char *w1, char *w2) {
    return strstr(w2, w1) != NULL;
}

void leer_cadena_valida(char *cadena, char *alfabeto, char *mensaje) {
    int valida;
    do {
        printf("%s", mensaje);
        scanf(" %s", cadena);
        valida = 1;
        for (int i = 0; cadena[i] && valida; i++) {
            if (!strchr(alfabeto, cadena[i])) {
                printf("Entrada invalida. La cadena contiene caracteres que no estan en el alfabeto.\n");
                valida = 0;
            }
        }
    } while (!valida);
}

void generar_lenguajes(char *alfabeto, int np, int l) {
    int alfabeto_len = strlen(alfabeto);

    printf("Lenguaje L1:\n");
    for (int i = 0; i < np; i++) {
        for (int j = 0; j < l; j++) {
            int rand_idx = rand() % alfabeto_len;
            l1[i][j] = alfabeto[rand_idx];
            l1[i][j+1] = '\0'; // Ensure the string is properly terminated
        }
        printf("%s\n", l1[i]);
    }

    printf("Lenguaje L2:\n");
    for (int i = 0; i < np; i++) {
        for (int j = 0; j < l; j++) {
            int rand_idx = rand() % alfabeto_len;
            l2[i][j] = alfabeto[rand_idx];
            l2[i][j+1] = '\0'; // Ensure the string is properly terminated
        }
        printf("%s\n", l2[i]);
    }
}

void generar_diferencia(int np) {
    int ld_count = 0;
    printf("Lenguaje LD (L1 - L2):\n");
    for (int i = 0; i < np; i++) {
        int found = 0;
        for (int j = 0; j < np; j++) {
            if (strcmp(l1[i], l2[j]) == 0) {
                found = 1;
                break;
            }
        }
        if (!found) {
            strcpy(ld[ld_count++], l1[i]);
            printf("%s\n", l1[i]);
        }
    }
}

int main() {
    char alfabeto[MAX_ALFABETO] = {0};
    char w1[MAX_CADENA], w2[MAX_CADENA];
    char inicio, fin;
    int opcion, np, l;

    srand(time(NULL)); // Seed the random number generator

    printf("Introduce tu alfabeto (i para individual, r para rango): ");
    char metodo;
    scanf(" %c", &metodo);

    if (metodo == 'r') {
        printf("Introduce el caracter inicial y final del rango: ");
        scanf(" %c %c", &inicio, &fin);
        for (char c = inicio; c <= fin; c++) {
            alfabeto[c - inicio] = c;
        }
    } else {
        printf("Introduce caracteres individualmente, termina con .: ");
        char entrada;
        int i = 0;
        while (scanf(" %c", &entrada) && entrada != '.') {
            alfabeto[i++] = entrada;
        }
    }

    leer_cadena_valida(w1, alfabeto, "Introduce la cadena w1: ");
    leer_cadena_valida(w2, alfabeto, "Introduce la cadena w2: ");

    printf("w1 %s es un prefijo de w2\n", es_prefijo(w1, w2) ? "" : "no");
    printf("w1 %s es un sufijo de w2\n", es_sufijo(w1, w2) ? "" : "no");
    printf("w1 %s es una subcadena de w2\n", es_subcadena(w1, w2) ? "" : "no");
    printf("w1 %s es una subsecuencia de w2\n", es_subsecuencia(w1, w2) ? "" : "no");

    printf("Â¿Deseas generar los lenguajes L1 y L2? (1 para si, otro para no): ");
    scanf("%d", &opcion);
    if (opcion == 1) {
        printf("Introduce el numero de palabras (np) y la longitud de las palabras (l): ");
        scanf("%d %d", &np, &l);
        generar_lenguajes(alfabeto, np, l);
        generar_diferencia(np);
    }
    printf("Primer commit ");
    return 0;
}
